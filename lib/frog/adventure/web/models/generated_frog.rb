# frozen_string_literal: true

require 'json'

module Frog
  module Adventure
    module Web
      module Models
        # Represents a frog generated by AI with additional attributes
        class GeneratedFrog
          attr_accessor :name, :species, :appearance, :personality,
                        :special_ability, :ability_description,
                        :favorite_food, :unique_trait, :backstory

          def initialize(name:, species:, appearance:, personality:, 
                         special_ability:, ability_description:,
                         favorite_food:, unique_trait:, backstory:)
            @name = name
            @species = species
            @appearance = appearance
            @personality = personality
            @special_ability = special_ability
            @ability_description = ability_description
            @favorite_food = favorite_food
            @unique_trait = unique_trait
            @backstory = backstory

            validate!
          end

          def validate!
            %i[name species appearance personality special_ability 
               ability_description favorite_food unique_trait backstory].each do |attr|
              value = send(attr)
              raise ArgumentError, "#{attr} cannot be empty" if value.nil? || value.empty?
            end
          end

          def to_frog
            Frog.new(
              name: @name,
              frog_type: FrogType::CUSTOM,
              ability: @special_ability,
              description: "#{@appearance} #{@personality}",
              species: @species,
              personality: @personality,
              backstory: @backstory
            )
          end

          def to_h
            {
              name: @name,
              species: @species,
              appearance: @appearance,
              personality: @personality,
              special_ability: @special_ability,
              ability_description: @ability_description,
              favorite_food: @favorite_food,
              unique_trait: @unique_trait,
              backstory: @backstory
            }
          end

          def to_json(*args)
            to_h.to_json(*args)
          end

          def self.from_json(json_string)
            data = JSON.parse(json_string, symbolize_names: true)
            from_hash(data)
          end

          def self.from_hash(data)
            new(
              name: data[:name],
              species: data[:species],
              appearance: data[:appearance],
              personality: data[:personality],
              special_ability: data[:special_ability],
              ability_description: data[:ability_description],
              favorite_food: data[:favorite_food],
              unique_trait: data[:unique_trait],
              backstory: data[:backstory]
            )
          end
        end
      end
    end
  end
end